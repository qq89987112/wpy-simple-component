<template>
  <view class="custom-calendar">
    <view class="custom-calendar-title"><view class="icon-left" @tap="change('left')">＜</view><text class="date-str">{{dateStr}}</text><view class="icon-right" @tap="change('right')">＞</view></view>
    <view class="custom-calendar-content">
      <repeat wx:for="{{dates}}"  item="item">
        <view class="custom-calendar-content-item {{item.active&&'active'}}" @tap="onDateTap({{item}})"><text>{{item.text}}</text></view>
      </repeat>

    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export class DateUtils {
    constructor(date){
      this.date = date;
    }

    getDays(){
      const
        date = this.date,
        month = date.getMonth()+1,
        year = date.getFullYear(),
        isLeapYear = year%4 === 0 && year%100!==0,
        bigMonth = [1,3,5,7,8,10,12];

      if(month === 2) {
        return isLeapYear ? 29 : 28;
      } else{
        return (~bigMonth.indexOf(month))&&31 || 30;
      }
    }

    lastMonth(){
      //setMonth(-1)会自动取到上一年
      this.date.setMonth(this.date.getMonth()-1);
      return this;
    }

    nextMonth(){
      //setMonth(13)会自动取到下一年
      this.date.setMonth(this.date.getMonth()+1);
      return this;
    }

    chineseDate(){
      let date = this.date;
      return `${date.getFullYear()}年${date.getMonth()+1}月${date.getDate()}日`;
    }

    equal(date){
      // [\d:]+ GMT
      const thisDate = this.date;
      return thisDate.toUTCString().replace(/ [\d:]+ GMT/,"") === date.toUTCString().replace(/ [\d:]+ GMT/,"");
    }
  }



    export default class calendar extends  wepy.page {
    constructor(){
      super();
      this.data = this.computeView();
    }

    computeView(){
      //获取上一个月的最后X天
      let
        dateUtils = new DateUtils(new Date(this.dateUtils.date.getTime())),
        date = dateUtils.date;
        date.setDate(1);
      let
        x = date.getDay(),
        preDays = dateUtils.lastMonth().getDays(),
        preDates = new Array(x).fill(0).map(()=>{return {text:preDays--}}).reverse();
        dateUtils.nextMonth();

      //本月最后一天星期几 下一个月的前几天,
      let
        days = dateUtils.getDays();
      date.setDate(days);
      let
        lastDay = date.getDay();
      //如果是星期日就变为0，其他不变，如星期一就是1
      lastDay = +(lastDay===7 && '0' || lastDay);

      return {
        dates:this.weekDays.concat(preDates).concat(new Array(days).fill(0).map((i,index)=>{
          let
            text = index+1,
            tempDate = new Date(date.getTime());
            tempDate.setDate(text);
            return {
              text: text,
              active: this.dateUtils.equal(tempDate),
              date:tempDate
        }}
        )).concat(new Array(6-lastDay).fill(0).map((i,index)=>{return {text:index+1}})),
        dateStr:this.dateUtils.chineseDate()
      }
    }

    reLoad(){
      const computed = this.computeView();
      this.dates = computed.dates;
      this.dateStr = computed.dateStr;
      this.$digest();
    }


    weekDays = ['日','一','二','三','四','五','六'].map(i=>{return {isTitle:true,text:i}});

    dateUtils = new DateUtils(new Date())


    components = {};
    events = {};

    onLoad() {
    };

    methods = {
      onDateTap(date){
        let date2 = date.date;
        if(!date.isTitle&&date2){
          this.dateUtils.date = new Date(date2);
          this.$emit('date',date2);
          this.reLoad();
        }
      },
      change(direction){
        let dateUtils = this.dateUtils;
        direction==='left' ? dateUtils.lastMonth() : dateUtils.nextMonth();
        this.reLoad();
      }
    };
  }
</script>
<style lang="scss">
  .custom-calendar{
    padding:30rpx;
    font-size: 26rpx;
    background: #5687c9;
    color: white;
    .custom-calendar-title{
      display: flex;
      font-weight: bold;
      padding-bottom: 30rpx;
      .icon-left{

      }
      .date-str{
        flex: 1;
        text-align: center;
      }
      .icon-right{

      }
    }
    .custom-calendar-content{

      display: flex;
      flex-wrap: wrap;
      .custom-calendar-content-item{
        flex: 1;
        text-align: center;
        line-height: 2em;
        min-width: 14%;
        max-width: 14%;
        margin: 0.5em 0;
        text{
          display: inline-block;
          width: 2em;
        }
        &.active{
          text{
            border-radius: 50%;
            background-color: #fff;
            color: #5687c9;
          }
        }
      }
    }
  }
</style>
