<template>
  <view class="custom-calendar">
    <view class="custom-calendar-title"><view class="iconfont icon-left" @tap="change('left')"></view><text class="date-str">{{dateStr}}</text><view class="iconfont icon-right" @tap="change('right')"></view></view>
    <view class="custom-calendar-content">
      <repeat wx:for="{{dates}}"  item="item">
        <view class="custom-calendar-content-item {{item.active&&'active'}} {{item.otherMonth&&'dark'}} {{item.valid&&'valid'}}" @tap="onDateTap({{item}})"><text>{{item.text}}</text></view>
      </repeat>

    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export class DateUtils {
    constructor(date){
      this.date = date;
    }

    getDays(){
      const
        date = this.date,
        month = date.getMonth()+1,
        year = date.getFullYear(),
        isLeapYear = year%4 === 0 && year%100!==0,
        bigMonth = [1,3,5,7,8,10,12];

      if(month === 2) {
        return isLeapYear ? 29 : 28;
      } else{
        return (~bigMonth.indexOf(month))&&31 || 30;
      }
    }

    lastMonth(){
      //setMonth(-1)会自动取到上一年
      this.date.setMonth(this.date.getMonth()-1);
      return this;
    }

    nextMonth(){
      //setMonth(13)会自动取到下一年
      this.date.setMonth(this.date.getMonth()+1);
      return this;
    }

    chineseDate(){
      let date = this.date;
      return `${date.getFullYear()}年${date.getMonth()+1}月${date.getDate()}日`;
    }

    format(split = '-'){
      let date = this.date;
      return `${date.getFullYear()}${split}${String(date.getMonth()+1).padStart(2,0)}${split}${String(date.getDate()).padStart(2,0)}`;
    }

    equal(date){
      // [\d:]+ GMT
      const thisDate = this.date;
      return thisDate.toUTCString().replace(/ [\d:]+ GMT/,"") === date.toUTCString().replace(/ [\d:]+ GMT/,"");
    }
  }



  export default class calendar extends  wepy.component {
    constructor(){
      super();
    }

    data = {
      selectedDate:false,
      validDates:false
    }

    computed = {
      dates(){
        //获取上一个月的最后X天
        let
          dateUtils = new DateUtils(new Date(this.dateUtils.date.getTime())),
          date = dateUtils.date;
        date.setDate(1);
        let
          x = date.getDay(),
          preDays = dateUtils.lastMonth().getDays(),
          //上一个月的最后几天
          preDates = new Array(x).fill(0).map(()=>{return {otherMonth:true,text:preDays--}}).reverse();
        dateUtils.nextMonth();

        let
          days = dateUtils.getDays();
        date.setDate(days);
        let
          lastDay = date.getDay();
        //如果是星期日就变为0，其他不变，如星期一就是1
        lastDay = +(lastDay===7 && '0' || lastDay);
        return this.weekDays.concat(preDates).concat(new Array(days).fill(0).map((i,index)=>{
          let
            text = index+1,
            tempDate = new Date(date.getTime());
          tempDate.setDate(text);

          let
            validDates = this.validDates,
            valid = validDates&&validDates.find(i=>(new DateUtils(tempDate)).equal(new Date(i))),
            selectedDate = this.selectedDate;
          return {
            text: text,
            //判断selectedDate是否存在并且等于当前tempDate 。 当 validDates 存在 且 当天不存在于其内，selectedDate就为空。
            active:selectedDate&&(new DateUtils(selectedDate)).equal(tempDate),
            date:tempDate,
            valid
          }}
        //  下一个月的前几天
        )).concat(new Array(6-lastDay).fill(0).map((i,index)=>{return {otherMonth:true,text:index+1}}))
      },
      dateStr(){
        return this.dateUtils.chineseDate()
      }
    }





    weekDays = ['日','一','二','三','四','五','六'].map(i=>{return {isTitle:true,text:i}});

    dateUtils = new DateUtils(new Date())


    components = {};
    events = {};

    onLoad() {
    };

    selectDate(date){
      let
        validDates = this.validDates,
        valid = !validDates || validDates.find(i=>(new DateUtils(date)).equal(new Date(i)));
        if(valid){
          this.selectedDate = date;
          this.$emit('date',date);
        }
    }

    setValidDates(validDates){
      this.validDates = validDates;
      this.selectDate(this.dateUtils.date);
      this.$digest();
    }

    methods = {
      onDateTap(date){
        let date2 = date.date;
        if(!date.isTitle&&date2&&date.valid){
          this.selectDate(new Date(date2));
        }
      },
      change(direction){
        let dateUtils = this.dateUtils;
        direction==='left' ? dateUtils.lastMonth() : dateUtils.nextMonth();

      }
    };
  }
</script>
<style lang="scss" scoped>

  @font-face {
    font-family: 'custom-calendar';
    src: url(data:application/font-woff2;charset=utf-8;base64,d09GMgABAAAAAANYAA0AAAAAB7AAAAMCAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZGVE0cGh4GVgCCShEICoMEgjsLDgABNgIkAxYEIAWFCAc5G20GIxF2aTAqIPtHYmxMr2mPEHL6opmduqK1EWssnZeJl/glgmKt7Fm4EIEmApc4QC4PLOy7qLACJpX9vzn9kQViV1YdubEq+dAlBb51oBI1Ynh+Rk8tAP7ncnqT8D+/d25rgh/o+Vh0wCcwBbYtmpVAcVGYnWoUSgPbBWGBC8IsBNw+HSoPd44+dOFuHaiMukiEVC5kSBDpvzgkJ9mdXMdB4PnxUc8oTyJPcZXjlgxepJ9V7xXppkIwi0FcngCkSNFYgEFSgcYy7VGSCUlUsyiAEfn5xd66/wRAlAhAJEjAvykA3yEF3F8UhQSUQGWUw3LsBTIA5EKk0hskOrlWWzqTSmferu6AJi/u3PxIpSCvQE64u3o7M0rz8qx05vfmZocgcjNXwvXsrXiT2zKjD2leW1tflylmb60bBwdWRIi7u5cy2ew3aAlmZm3mRjRxaEO8nQ2w25xo4zZnrwU9w64LVzNBtGN2Hlkz2pFfRuvwEkxTHE6Qzu3kx/FkEiqOQf/tn/489+m88bPTxp7a1X903Kg8t6JP5eoNqzfA99y7dvXkAf1X1W3W623VpfWmTo/acnTizBWvZENf7BrKmu1r+9L9jYZvw4b971SAcktYLoxSlEOHfdPG6eNBIGgfH6/MVfX6Xb5SpoEM61w8T8vS+igvAUGldmUgLcP/O0CeAWIy6XudM9E22gqUjJeDBBVVRAFQ0xMBqKOzAKG8SQIkylkqQKq8nQEy5Z0MkKvksgAl5T0XoKJOMUCASmrFCanIKqAjNoTqBkCiqtmQqm45mpGHIFfXJSip7hZUNMWH6kraxjIVDbSwyZJYpTBuapxeoGtVlIKl0l17pvdkfnePD2SAcz9AmuVGymQT/maL6j86Rc+zzVbB7o6Fo7CqSx4LR8OifUo1fGw6l7TaXBxj5EbNWsXdG8cZbLlcc9ebtSJL4zAcCVhbbS6OMVoHMrdfmemY8E/w+wB4jOupSAQlbA/TtQpM03UUmhnnXgIiAVQktJQQEjMjiTQfaJRspAEAAA==) format('woff2'),
    url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAVoAA0AAAAAB7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAFTAAAABoAAAAcgsuDY0dERUYAAAUsAAAAHgAAAB4AKQAMT1MvMgAAAaAAAABCAAAAVlbmSvdjbWFwAAAB/AAAAE0AAAFK0bUeo2dhc3AAAAUkAAAACAAAAAj//wADZ2x5ZgAAAlwAAAFSAAABhNsgR21oZWFkAAABMAAAADAAAAA2EC6gUGhoZWEAAAFgAAAAHQAAACQHmgOGaG10eAAAAeQAAAAWAAAAFg5kAVJsb2NhAAACTAAAAA4AAAAOATgAnG1heHAAAAGAAAAAHwAAACABFQBdbmFtZQAAA7AAAAFJAAACiCnmEVVwb3N0AAAE/AAAACYAAAA540TUUHjaY2BkYGAAYgvGF5bx/DZfGbhZGEDg2uR1unBa5/9D5j3MEkAuBwMTSBQAG0UKg3jaY2BkYGBu+N/AEMPCAALMexgYGVABKwBU6wMpAAAAeNpjYGRgYGBjCGRgZQABJiDmAkIGhv9gPgMAEUgBcwB42mNgZP7BOIGBlYGBqZPpDAMDQz+EZnzNYMTIARRlYGVmwAoC0lxTGBwYKl7yMjf8b2CIYW5gaAAKM4LkACInDHQAAAQAAAAAAAAAAVUAAAPpACwEAAEmASYAAHjaY2BgYGaAYBkGRgYQcAHyGMF8FgYNIM0GpBkZmBgqXvL+/w/kV7zk+f//f7fYD6h6IGBkY4BzGJmABBMDKmBkoBlgZhgcAAA7xQpCAAAAAAAAAAAAAAAAdgCcAMIAAHjaZc05TsNQEAbg9z/jLSTetzibF2KDDJEwJikQSUNBEAUSFSUHgDYNRRokCgrOgJA4QihykkgpEJzjwQsto2nmH803RCT7P5/CUgiITXbJITkjV4RAKpBotIM4rwa0gBuLru9oQp7msZwmA+EUfiI5XjmsMl+SJR0aujiKy2E+oDmOqzE9Qel1gGYrvLb6bUt4QS3Iu4/sgr7C7aVtfXzApvsTp4xsZVa3rKZlPSuSKCqUbuka7nxPFdWaxN5EPXSXvT3aQ72Zh5c3jahl3T5V952+rwLzOexWpL1PzNDk/RB6ttWUjYYShI10x8Hsezuw653si/ACMkLpijJi8sGRISVZNVKRVcPSh0dXBlsYRWQgZWsjKkycG5i7JlvoUcFDpHyps4X536pGGJaeI6vwHCnJkSEzMN1YbM3PuMU+/ixMNxZb8wfcwnRj/QI82ECBAAB42n2QPU4DMRCFn/MHJBJCIKhdUQDa/JQpEyn0CKWjSDbekGjXXnmdSDkBLRUHoOUYHIAbINFyCl6WSZMia+3o85uZ57EBnOMbCv/fJe6EFY7xKFzBETLhKvUX4Rr5XbiOFj6FG9R/hJu4VQPhFi7UGx1U7YS7m9JtywpnGAhXcIon4Sr1lXCN/CpcxxU+hBvUv4SbGONXuIVrZakM4WEwQWCcQWOKDeMCMRwskjIG1qE59GYSzExPN3oRO5s4GyjvV2KXAx5oOeeAKe09t2a+Sif+YMuB1JhuHgVLtimNLiJ0KBtfLJzV3ahzsP2e7ba02L9rgTXH7FENbNT8Pdsz0khsDK+QkjXyMrekElOPaGus8btnKdbzXgiJTrzL9IjHmjR1OvduaeLA4ufyjBx9tLmSPfeoHD5jWQh5v91OxCCKXYY/k9hxGQAAAHjaY2BigAAuBuyADYgZGZgYohmZGJlZizLTM0pYclLTSgAetARKAAAAAAAB//8AAgABAAAADAAAABYAAAACAAEAAwAFAAEABAAAAAIAAAAAeNpjYGBgZACCq0vUOUD0tcnrdGE0AD+fBjIAAA==) format('woff');
    font-weight: normal;
    font-style: normal;
  }

  .custom-calendar{
    padding:30rpx;
    font-size: 26rpx;
    background: #5687c9;
    color: white;




    .iconfont {
      font-family:"custom-calendar" !important;
      font-style:normal;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .icon-right:before { content: "\e90c"; }

    .icon-left:before { content: "\e90d"; }

    .custom-calendar-title{
      display: flex;
      font-weight: bold;
      padding-bottom: 30rpx;
      .icon-left{

      }
      .date-str{
        flex: 1;
        text-align: center;
      }
      .icon-right{

      }
    }
    .custom-calendar-content{

      display: flex;
      flex-wrap: wrap;
      .custom-calendar-content-item{
        flex: 1;
        text-align: center;
        line-height: 2em;
        min-width: 14%;
        max-width: 14%;
        margin: 0.5em 0;
        text{
          border-radius: 50%;
          display: inline-block;
          width: 2em;
        }
        &.valid{
          text{
            border: 1rpx solid #fff;
          }
        }

        &.dark{
          text{
            color: #aaa;
          }
        }

        &.active{
          text{
            background-color: #fff;
            color: #5687c9;
          }
        }
      }
    }
  }
</style>
